#!/ata/pkg/oils_0.27.0/usr/bin/ysh

# prototype #3

# currently, ata operates with a single repo and a single tree
# the directory in ATA_SRC_REPO contains source packages
# a source package currently is a txtar archive representing a directory
# the directory must contain:
# an executable file named 'build'
# a newline seperated file named 'needs', where each line is a $name-$ver
# the 'needs' files must contain two special directives:
# libc:$pkgname
# toolchain:$pkgname
# these will configure the toolchain and libc used in building the package
# a package specified by libc: must contain a file named `libc` containing the path
# to the dynamic linker
# a package specified by toolchain: must have a file named `toolchain` containing the triplet
# these packages will be symlinked into the package's /lib dir
# sources, which is a newline seperated set of source links
# this file format is not stable. it will change in future

# some dependency resolution at the moment 


nl='
'

p () {
    # p ( str... )
    write -- "$@"
}

pd () {
    # pd ( str, [fd]:-1 )
    write -- "$1" >&"${2:-1}"
}

log () {
    # log ( str... )
    pd "ata: $*" 2
}

err () {
    # err ( str... )
    log "$@"
    exit 1
}

# Wrap a string in a list, unless it is already a list.
func W(list) {
    if (type(list) === "Str") {
        return ([list])
    }
    return (list)
}

func default(d, k, v) {
    if (get(d, k) === null) {
        setvar d[k] = v
    }
    return (d)
}

func sdd(d,k,b) { # the same as above, but with string defaults: 'String Dict Default'
    if (get(d, k) === null) {
        setvar d[k] = b
    } else {
        setvar d[k] = (d[k]++b)
    }
    return (d)
}


proc nth_component (n, string, delim=" ") {
    p $[string.split (delim)[n]]
}

proc filename_from_url (url) {
    nth_component -1 $url "/"
}

proc version_from_name (name) {
    nth_component -1 $name "-"
}

# Bulk out a list with filler items.
func shape(list, n, fill=null) {
    if (n > len(list)) {
        for _ in (len(list) ..< n) {
            call list->append(fill)
        }
    }
    return (list)
}



#func exactmatch(str, egg) {
#
#}

var ATA_TREE = "/ata/pkg" # For now, this one isn't alterable.

call default (ENV, "ATA_SRC_REPO", "/ata/src/builds")
call default (ENV, "XDG_CACHE_HOME", "$[ENV.HOME]/.local/cache")
call default (ENV, "DESTDIR", "")
call default (ENV, "ATA_WORLDS", "/ata/worlds")
call default (ENV, "ATA_SKIP_REBUILD", 1)
call default (ENV, "ATA_REPO", "/ata/repo")
call default (ENV, "ATA_BINCACHE", "$[ENV.XDG_CACHE_HOME]/ata/built")
call default (ENV, "ATA_ISOLATED_BUILD", 0)

setglobal SRCPKG_SUFFIX = ".txtar"

# These regexes determine valid package names. Currently, we are very permissive.
# I will be shrinking this in future.

setvar Pc = / [ a-z A-Z '_' '-' 0-9 '.' ] /
setvar VALID = / Pc+ '-' Pc+ /

proc usage () {
    cat << 'EOF'
usage: ata <command> [<args>]

The following commands are currently supported:
    build     <pkg> [<version>]    Compile a binary package from source
    install   <pkg> [<version>]    Install a compiled package
EOF
}


# usage: read --all < ./xyz.txtar
# txtar_read(_reply.split(u'\n'))
# or, to get the contents of filename
# txtar_read(_reply.split(u'\n'), filename) 
func txtar_read (lines, select="") {
    var archive = {}
    var file = ""
    var body = false
    for line in (lines) {
        if (line ~ /'-- '.+' --'/) {
            setvar file = line => trim(/' '? '--' ' '?/) => trim()
            setvar archive[file] = []
            setvar body = true
        } else {
            $body || continue
            setvar archive[file] = archive[file] ++ [line]            
        }
    }
    if (select) {
        return (archive[select])
    }
    return (archive)
    
}

# takes the input of txtar_read, and unpacks it into CWD
proc txtar_unpack (;txtar) {
    for filename, file in (txtar) {
        if (filename ~ /.+'/'.+/ ) {
            mkdir -p ${filename%%/*}
        }
        : > $filename
        
        write -- @[W(file)] > $filename  
    }
}

proc find_srcpkg (;name, build) {
    var b
    var path
    # Because '~' is a partial match, package names with numbers will get detected 
    # as having a version number in their name.
    # Will need to produce an 'exactmatch' function.
    if (name => split('_')[-1] ~ /([0-9]+|'git')'.'*/) {
        json write (name => split('_')[-1] )
        # Is the last component of the name a version number?
        # If so, take the package name verbatim
        setvar path = "$[ENV.ATA_SRC_REPO]/$name.txtar"
        
    } else {
        # otherwise, run a test
        #setvar path = :| $[ENV.ATA_SRC_REPO]/${name}_*.txtar |[0]
        var c = []
        
        locate (name, ENV.ATA_SRC_REPO, &c)
        setvar path = c[0]
    }

    read --all < $path
    setvar b = txtar_read(_reply.split(u'\n'))
    setvar b["name"] = path => trim(".txtar") => trimStart(/ .+'/' /)
    setvar b["path"] = path
    for file in build needs version {
        if (get(b, file) === "") {
            err "invalid package: missing $file"
        }
    }
    call build->setValue(b)
}

copy_to () {
    # copy_to ( path, dest )
    # download_src -> copy_to
  
    # if its an archive, extract it
    # if it's a directory, copy the files
    # This function will be rewritten.
    case $1 in
        *.tar*|*.t*)
            # NB. not very robust checking: anything is a valid file extension
            # in practice, .tgz, .tbz2, etc can be found
            log "extracting $1"
            tar xf "$1" --strip-components 1 -C "$2"
            # NB. --strip-components is not always present
        ;;
        /files/*)
            :
        ;;
        *)
            if test -d "$1"; then
                log "copying dir $1"
                cp -r "$1/." "$2" 
            else
                log "copying file $1"
                cp -f "$1" "$2"
            fi
        ;;
    esac
}

proc generate_checksum (path; build="") {
    # TODO: UNDO EMBEDDING OF FILES 
    log $path
    if (path ~~ '/files/*') {
        log 'embedded file, skipping'
        p 'file'
        return 0
    }
    
    case $[path => split("/")[-1]] in
        git:*) 
            p "git"
        ;;
        *)
            var c = $(sha256sum "$path") 
            p "${c%  *}"
        ;;
    esac
}


# This entire function is legacy shell.
proc download_src (;url, build, destination="") {
    var dir="$[ENV.XDG_CACHE_HOME]/ata/src/$[build.name]"
    mkdir -p "$dir"

    log "URL: $url"
    case $url in
        git:*)
            # git:https://git.com/repo@commit
            setvar url = url =>trimStart("git:") => split("@")
            var commit = url[1]
            setvar url = url[0]
            
            setvar destination = $(filename_from_url "$url")
            setvar destination = "git:${destination}@${commit}"
            if test -d "${dir}/${destination}" ; then
                log "$destination already cloned, skipping"
            else
                log "cloning $url"
                git clone --progress "$url" "$dir/$destination" >&2
                log "getting commit $commit"
                (cd "$dir/$destination"; git reset --hard "$commit") >&2
            fi
        ;;
        http[s]://*)
            if (destination === "") {
                setvar destination = $(filename_from_url "$url")
            }
            if test -f "$dir/$destination" ; then
                log "$destination already downloaded, skipping"
            else
                log "downloading $destination"
                curl "$url" -sSLo "$dir/$destination"
            fi
        ;;
        *://*)
            err "scheme in $url not supported"
        ;;
        *)
            log "no scheme, assuming file"
            
            setvar destination = "$url"
            setvar dir=""
        ;;
    esac
    p "$dir/$destination"
}

proc construct_compiler_flags (;build) {
    var rpath = "$ATA_TREE/$[build["name"]]/lib" # TODO: implement a more general solution
    var flags = "-L$rpath -Wl,-rpath,$rpath -Wl,-rpath-link,$rpath "
    # We shove this set of flags in everything, with the hopes that something will listen.
    # Some things respect LDFLAGS, but not CFLAGS. For others, it's the other way around.
    # There's no guaranteeing how these flags will be used, so it's important to get
    # this set into everything.
    
    # It should be unset at this point. Best be safe, though.
    call default(build, 'env', {})
    # => chaining was attempted here, fruitlessly.
    call   sdd(build.env, 'CFLAGS',   flags) \
        => sdd('CXXFLAGS', flags) \
        => sdd('LDFLAGS',  flags) \
        => sdd('LD_LIBRARY_PATH', rpath)

    # build.meta represents runtime dependencies.    
    setvar build["meta"] = {}
    

    mkdir -p "$ATA_TREE/$[build.name]/lib" # Annoying, but neccessary.
    # But, not for long.
    # We can bind-mount into a tmpfs and then unshare-chroot into it, creating an isolated environment.
    var dep = ""
    # Parser for the 'needs' format.
    for line in (build.needs) {
        if (line === "") { continue }
        
        var line = line => split(/':'|','/)
        if (len(line) > 1) {
            setvar dep = line->pop() => trim()
            if (line[0] === "make") {
                call line->append("path")
                call line->reverse()
            }
        } else {
            setvar dep = line[0] # for consistency's sake
            setvar line = ["path"]
            
        }
        for mod in (line) {
            var mod = mod => trim()
            case $mod in
                libc)
                    # Manually specifying the libc package allows us to swap it out in future.
                    # The 'libc' file/attribute contains the name of the dynamic C library.
                    if ("${libc:-}" !== '') {
                        err "libc set twice in $[build['name']]"
                    }
                    var libc
                    find_srcpkg (dep, &libc)
                    if (libc.libc === null) {
                        err "$dep, specified as libc, has no 'libc' file"
                    }
                    setvar libc = libc.libc[0]
                        
                    call build.env \
                    => sdd('CFLAGS',
                      "-Wl,-dynamic-linker,$ATA_TREE/$1/usr/lib/$libc " ++ \
                      "-isystem $ATA_TREE/$dep/usr/include "
                    ) \
                    => sdd(
                      'LDFLAGS',
                      "-Wl,-dynamic-linker,$ATA_TREE/$dep/usr/lib/$libc "
                    ) \
                    => sdd( \
                       'CXXFLAGS',   \
                       "-Wl,-dynamic-linker,$ATA_TREE/$dep/usr/lib/$libc "
                    )
                    
                ;&
                lib)
                    call build.env \
                    => sdd('C_INCLUDE_PATH', "$ATA_TREE/$dep/usr/include:") \
                    => sdd('CFLAGS', "-I$ATA_TREE/$dep/usr/include ") \
                    => sdd('CXXFLAGS', "-I$ATA_TREE/$dep/usr/include ") \
                    => sdd('PKG_CONFIG_PATH', "$ATA_TREE/$dep/usr/lib/pkgconfig:")
                    # This will be removed in isolated builds.
                    
                    for f in "$ATA_TREE/$dep"/usr/lib/* {
                        test -e "$f"  || continue
                        ln -sf "$f" "$ATA_TREE/$[build.name]/lib"
                    }
                    setvar build.meta[dep] = ""
                ;;
                toolchain)
                    # Toolchain packages represent the C compiler.
                    # The 'toolchain' file/attribute contains the compiler triplet.
                    # Ideally, toolchain packages should not produce a runtime dependency on them.
                    # However, the project is not mature enough yet to guarantee this.
                    # Static builds currently will have to manually specify they do not depend on
                    # the toolchain at runtime.
                    if ("${toolchain:-}" !== '') {
                        err "toolchain set twice in $[build['name']]"
                    }
                    var toolchain
                    find_srcpkg (dep, &toolchain)
                    if (toolchain === null) {
                        err "$dep, specified as toolchain, has no 'toolchain' file"
                    }
                    setvar toolchain = toolchain.toolchain[0] 
                    call build.env \
                    => sdd('CC',   "$toolchain-cc") \
                    => sdd('CXX',  "$toolchain-c++") \
                ;&
                path)
                    # unadorned packages are added to $PATH
                    call sdd(build.env, 'PATH', "$ATA_TREE/$dep/usr/bin:")
                    setvar build.meta[dep] = ""
                ;;
                make)
                    # Make dependencies are only needed at build time.
                    # They're automatically added to the PATH, because it's more convenient.
                    # Previous versions added every package to every single variable,
                    # but this lead to environment pollution.
                    # A small amount of pollution here is accepted for convenience.
                    call sdd(build.env, 'PATH', "$ATA_TREE/$dep/usr/bin:")
                    call build.meta->erase(dep)
                
            esac
        }
    }
}

proc setup_build_dir (;build) {
    setvar build.builddir = "$tmp_base/build"
    mkdir -p $[build.builddir]
    setvar build.destdir = "$tmp_base/dest"
    mkdir -p $[build.destdir]
    
    log "setting up build in $[build.builddir]"
    
    
    # todo: allow for packages to be split into individual files or txtars
    # test -d it, check for a txtar inside
    
    # maybe?
    
    # Some files, like busybox config, are too large. 
    cd $[build.builddir]
    for line in (build.sources) {
        var x = line.split(" ") => shape(3, "")
        var url = x[0]
        var checksum = x[1]
        var dest = x[2]
        var extract_to = "$[build.builddir]/${dest:-}"
        var f = $(download_src (url, build, dest))
        var h = $(generate_checksum "$f")
        test "$h" = "$checksum" || err "expected checksum '$checksum', got '$h'"
        mkdir -p "$extract_to"
        copy_to "$f" "$extract_to"
    }
    

}

tmp_cleanup () {
    if (get(ENV, "ATA_DEBUG") !== null) {
        log "TMP: $tmp_base"
        return
    }
    if ("$tmp_base" !== "") {
        rm -rf "$tmp_base"
    }
}

proc do_build (;pkgname, build) {
    find_srcpkg (pkgname, &build)
    log "building $[build.name]"
        
    var pkg_dir = "$tmp_base/pkgdir"
    mkdir -p $pkg_dir
    cd $pkg_dir { txtar_unpack (build) }
    chmod +x "$pkg_dir/build"

    
    construct_compiler_flags (build)
    setup_build_dir (build)
    var time1 = $(date +%s)
    log "starting build in $[build.builddir]"
        
    var env = []
    for k, v in (build.env) {
        call env->append("${k}=$[v.trimEnd(':')]")
        #log "${k}=$[v.trimEnd(':')]"
    }
    
    cp -r "$pkg_dir/files" "$tmp_base/build" ||: #stopgap 
    
    cd "$tmp_base/build" {
    env -i @env \
        _prefix="$ATA_TREE/$[build.name]/usr" \
        "$pkg_dir/build" "$[build.destdir]" "$[build.name]"
    }
            
    mkdir -p "$[build.destdir]/$ATA_TREE/$[build.name]"
    cp -r "$[build.path]" "$[build.destdir]/$ATA_TREE/$[build.name]"
    
    
    var time2 = $(date +%s)
    log "build completed in $[time2 - time1]s"
    
    mkdir -p "$[ENV.ATA_BINCACHE]"
    cd "$[build.destdir]/$ATA_TREE/$[build.name]"
    tar cJf "$[ENV.ATA_BINCACHE]/$[build.name].tar.xz" . 
    # Write the meta file for the build here.
    
    {
        for d in (keys(build.meta)) {
            p "dep: $d"
        }
        p "version: $[W(build.version)[0]]"
    } > "$[ENV.ATA_BINCACHE]/$[build.name].meta"

}

# procedure:
# find package
# read meta file
# take list of deps
# recurse.
# keep a 'visited' set
# conclude at the end of the list
# skip if you've already visited the package
# do_fetch (;pkgname, visited={})

proc do_fetch(;pkgname) {
    # This doesn't take a 'var build'.
    # Search remote (local) repositories for packages, add them to /ata/repo.
    mkdir -p "/ata/repo"
    var list = []
    get_deps (pkgname, list)
    
}

proc get_deps (;pkgname, deps) {
    var f
    var list
    locate (pkgname, ENV.ATA_BINCACHE, &list)
    if (list === []) {
        err "Package $pkgname not found in binary cache $[ENV.ATA_BINCACHE]."
    }
    var archive = list[0]
    if (archive !~~ "*.tar.*") {
        err "Package name is missing an archive."
    }
    var meta = archive => trimEnd(/'.tar.'.+/) ++ ".meta"
    test -f $meta || err "Package lacks a metadata file."

    read --all < $meta
    for f in (_reply.split(u'\n')) {
        $[f === ""] && continue
        if (f ~~ "dep: *") {
            setvar f = f=>trimStart("dep: ")
            if (deps => indexOf(f) === -1 ) {
                call deps->append(f)
                get_deps (f, deps)
            }
        }
        
    }
    json write (deps)
}

proc locate(;file, dir, list) {
    var candidates = []
    for f in "$dir/$file"* {
        if (file !~ '_') {
            if ( (f => trim("$dir/") => split("_")[:-1]) === [file] ) {
                call candidates->append(f)
            }
        } elif ( (f => trim("$dir/")) ~~ "${file}.*" ) {
                call candidates->append(f)
        } 
    }
    call candidates->reverse()
    call list->setValue(candidates)
    # Shell iterates in lexographic order. We can get away with just reversing as a result.
}


main () {
    setglobal tmp_base = $(mktemp -dt ata-$$-XXXXXXXX)
    trap tmp_cleanup INT
    trap tmp_cleanup EXIT
    var build = {}
    if (len(ARGV) < 1) {
        usage
        err "requires at least one argument"
    }
    case $[ARGV[0]] in
    usage)
        usage
    ;;
    build)
        shift 1
        do_build (ARGV[1], &build)
    ;;
    fetch)
        shift 1
        do_fetch (ARGV[1])
    ;;
    scaffold)
        # Creates an empty ata package
        # Takes a name, version, and a source url, and generates an empty package in this directory.
        shift 1
        call shape(ARGV, 4)
        if (ARGV[1] === null) {
            log 'usage: ata scaffold $name-$version [$url]'
            err "name and version not provided"
        }
        var pkgname = ARGV[1]
        if (pkgname !~ VALID) {
            err "invalid package name: $pkgname"
        }
        
        if (ARGV[2] !== null) {
            var checksum = "$[ARGV[2]] $(generate_checksum $[ARGV[2]])" 
        }
        
        test -e "$pkgname.txtar" && err "package $pkgname already exists here"
        cat << EOF > "$pkgname.txtar"
-- build --
#!/bin/sh -e
-- sources --
${checksum:-}
-- version --
$(version_from_name $pkgname)
-- needs --
EOF
    ;;
    add)
        shift 1
        find_srcpkg (ARGV[1], &build)
    
        var pkgf = "$[ENV.ATA_BINCACHE]/$[build.name].tar.xz" 
        
        if ! test -e "$pkgf" || [ "$[ENV.ATA_SKIP_REBUILD]" != 1 ]; then
            log "archive $pkgf not found, exiting"
            exit 1
        fi
        log "found archive for $[build.name]: $pkgf"
        mkdir -p "$ATA_TREE/$[build.name]"
        log "installing to $ATA_TREE/$[build.name]"
        tar xf "$pkgf" -C "$ATA_TREE/$[build.name]"
        log "installed $[build.name]"
        
    ;;
    # I've temporarily cut away the "world" functionality,
    # as it needs to be reworked in light of other functionality
    *)
        usage
        err "command $1 not implemented"
    ;;
    esac
}

main "$@"
