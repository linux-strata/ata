#!/bin/sh -e

# prototype #2

export ATA_TREE="/ata/tree"
export HOST_ATA_TREE="/ata/tree"
export ATA_SRC_REPO="${ATA_SRC_REPO:-/ata/src/builds}"

export ATA_WORLDS="${ATA_WORLDS:-/ata/worlds}"
ATA_SKIP_REBUILD=1

# currently, ata operates with a single repo and a single tree
# the directory in ATA_SRC_REPO contains source packages
# a source package currently is a directory named $name/$ver
# the directory must contain:
# an executable file named 'build'
# a newline seperated file named 'needs', where each line is a $name/$ver
# 'needs' files must contain two special directives:
# libc:$pkg/$ver
# toolchain:$pkg/$ver
# these will configure the toolchain and libc used in building the package
# a package specified by libc: must contain a file named `libc` containing the path
# to the dynamic linker
# a package specified by toolchain: must a file named `toolchain` containing the triplet
# these packages will be symlinked into the package's /lib dir
# sources, which is a newline seperated set of source links
# this file format is not stable. it will change in future

# no dependency resolution at the moment 

nl='
'

p () {
    # p ( str... )
    printf "%s\n" "$@"
}

pd () {
    # pd ( str, [fd]:-1 )
    printf "%s\n" "$1" >&"${2:-1}"
}

log () {
    # log ( str... )
    pd "ata: $*" 2
}

err () {
    # err ( str... )
    log "$@"
    exit 1
}

usage () {
    cat << 'EOF'
usage: ata <command> [<args>]

The following commands are currently supported:
    build     <pkg> [<version>]    Compile a binary package from source
    install   <pkg> [<version>]    Install a compiled package
    checksums <pkg> [<version>]    Generate checksums of a package's sources
    world build  <worldfile>       Construct an ata world from a worldfile
    world env    <worldfile>       Enter an environment specified by a worldfile
EOF
}

dir_first () {
    # dir_first ( path )
    for file in "$1"/*;do
        p "${file#$1/}"
        return 0
    done
}

filename_from_url () {
    # filename_from_url ( url )
    old_ifs=$IFS
    IFS='/'
    set -f
    #shellcheck disable=SC2048,SC2086
    set -- $*
    
    for a in "$@"; do
        :
    done
    
    p "$a"
    set +f
    IFS=$old_ifs
}

nth_component () {
    # nth_component ( n string delim )
    # NB. negative N counted from end
    # 0 uninclusive
    n=$1
    string=$2
    old_ifs=$IFS
    IFS=${3:-/}
    set -f
    #shellcheck disable=SC2048,SC2086
    set -- $string
    
    shift $(( (n + $#) % $# ))
    
    p "$1"
    set +f
    IFS=$old_ifs
}

file_equal () {
    # file_equal ( file1, file2 ) 
    if which diff >/dev/null 2>&1; then
        diff "$1" "$2" >/dev/null 2>&1
        return $?
    fi
    f1=''
    f2=''
    while IFS='' read -r l; do
        f1="${f1}${nl}${l}"
    done <  "$1"
    while IFS='' read -r l; do
        f2="${f2}${nl}${l}"
    done <  "$2"
    [ "$f1" = "$f2" ]
}

recursive_file_merge () {
    # recursive_file_merge ( source, destination, [DESTDIR] )
    # create a recursive link between two directories.
    # mirror created directories, softlink files.
    find "$3/$1" | while read -r abs; do
        rel=${abs#"$3/$1"}
        if [ -L "$abs" ]; then
            ln -sf "$1$rel" "$3$2$rel"
        else
            [ -d "$abs" ] && mkdir -p "$3/$2/$rel"
            [ -f "$abs" ] && ln -sf "$1$rel" "$3$2$rel"
        fi
    done
    # NB. doesn't handle conflicts
}

is_dynamic () {
    # is_dynamic ( file )
    
    case $(readelf -d "$1" 2>&1 | tail -n1) in
        *"no dynamic"*)
            return 1 ;;
        *"Not an ELF"*)
            return 1 ;;
        *)
            return 0 ;;
    esac
}

find_pkg () {
    pkg=${1:?no package name provided}
    ver=$2
    [ -d "$ATA_SRC_REPO"/"$pkg" ] || err "pkg $pkg not found"
    case $pkg in
        */*)
            ver=${pkg#*/}
            pkg=${pkg%/*}
        ;;
        *)
            [ -z "$ver" ] && ver=$(dir_first "$ATA_SRC_REPO/$pkg")
        ;;
    esac
    [ -d "$ATA_SRC_REPO/$pkg/$ver" ] || err "$pkg/$ver: no such version"
    pkg_dir="$ATA_SRC_REPO/$pkg/$ver"
}

copy_to () {
    # copy_to ( path, dest )
    # download_file -> copy_to
  
    # if its an archive, extract it
    # if it's a directory, copy the files
    case $1 in
        *.tar*|*.t*)
            # NB. not very robust checking: anything is a valid file extension
            # in practice, .tgz, .tbz2, etc can be found
            log "extracting $1"
            tar xf "$1" --strip-components 1 -C "$2"
            # NB. --strip-components is not always present
        ;;
        *)
            if [ -d "$1" ]; then
                log "copying dir $1"
                cp -r "$1/." "$2" 
            else
                log "copying file $1"
                cp -f "$1" "$2"
            fi
        ;;
    esac
}

generate_checksums () {
    # generate_checksums ( pkg_dir )
    # outputs to stdout
    ver=$(filename_from_url "$1")
    pkg=$(nth_component -2 "$1")

    while read -r src _; do
        case $src in
            git*) 
                p "$src git git"
            ;;
            http[s]*)
                f=$(download_file "$src" "$pkg-$ver")
                
                c=$(sha256sum "$f")
                c=${c% *}
                log "$c"
                p "$src $c" 
            ;;
        esac
    done < "$1/sources"
}

download_file () {
    # download_file( url, pkg-ver )
    : "${XDG_CACHE_HOME:=$HOME/.local/cache}"
    
    dir="$XDG_CACHE_HOME/ata/$2/src"
    mkdir -p "$dir"

    log "URL: $1"
    case $1 in
        git:*)
            # git:https://git.com/repo@commit
            url=${1%@*}
            url=${url#git:}
            commit=${1#*@}
            destination=$(filename_from_url "$url")
            destination="${destination}@${commit}"
            if [ -d "${dir}/${destination}" ]; then
                log "$destination already cloned, skipping"
            else
                log "cloning $url"
                git clone --progress "$url" "$dir/$destination" >&2
                log "getting commit $commit"
                (cd "$dir/$destination"; git reset --hard "$commit") >&2
            fi
        ;;
        http[s]://*)
            destination=$(filename_from_url "$1")
            if [ -f "$dir/$destination" ]; then
                log "$destination already downloaded, skipping"
            else
                log "downloading $destination"
                curl "$1" -sSLo "$dir/$destination"
            fi
        ;;
        *://*)
            err "scheme in $1 not supported"
        ;;
        *)
            log "no scheme, assuming file"
            [ -f "$pkg_dir/$1" ] || err "$1 not file"
            destination="$pkg_dir/$1"
            dir=""
        ;;
    esac
    p "$dir/$destination"
}

validate_package () {
        log "building $pkg/$ver"
        for f in build sources checksums needs; do
            [ -f "$pkg_dir/$f" ] || err "$pkg/$ver: no $f file"
        done
        
        log "comparing sources to checksums"
        generate_checksums "$pkg_dir" | sort | file_equal "$pkg_dir/checksums" /dev/stdin || err "checksums in package and generated differ"
        log "checksums match"
}

create_rpath_dir () {
    [ "$pkg" = musl-cross-make ] && return 0
    for f in "$DESTDIR$ATA_TREE/$pkg/$ver/usr/bin/"*; do
        [ -e "$f" ]     || continue
        is_dynamic "$f" || continue
        [ -L "$f" ]     && continue
        patchelf "$f" --set-rpath "$ATA_TREE/$pkg/$ver/lib"
        mkdir -p "$DESTDIR$ATA_TREE/$pkg/$ver/lib"
        lib=$(patchelf --print-needed "$f")
        [ -L "$DESTDIR$ATA_TREE/$pkg/$ver/lib/$lib" ] && continue
        while read -r dep; do
            case $dep in
                libc:*)
                    dep=${dep#*:}
                    read -r libc < "$DESTDIR$ATA_TREE/$dep/ata/libc"
                    patchelf "$f" --set-interpreter "$ATA_TREE/$dep/usr/lib/$libc"
                ;;
            esac
            dep=${dep#*:}
            main files /lib "$dep" | while read -r dep_file; do
                if [ $(filename_from_url "$dep_file") = "$lib" ]; then
                    ln -s "$ATA_TREE/$dep/usr${dep_file#.}" "$DESTDIR$ATA_TREE/$pkg/$ver/lib/$lib" 
                fi    
            done
        done < "$pkg_dir/needs"
    done
}

construct_compiler_flags () {
    rpath="$HOST_ATA_TREE/$pkg/$ver/lib"
    CFLAGS="-L$rpath -Wl,-rpath,$rpath"
    CXXFLAGS="-L$rpath -Wl,-rpath,$rpath"
    LDFLAGS="-L$rpath -Wl,-rpath,$rpath"
    parse_needs
}

setup_libc () {
    [ -e "$ATA_SRC_REPO/$1/libc" ] || err "package specified with libc: missing 'libc' file"
    read -r libc < "$ATA_SRC_REPO/$1/libc"
    CFLAGS="-Wl,-dynamic-linker,$HOST_ATA_TREE/$1/usr/lib/$libc -isystem $HOST_ATA_TREE/$1/usr/include $CFLAGS"
    LDFLAGS="-Wl,-dynamic-linker,$HOST_ATA_TREE/$1/usr/lib/$libc $LDFLAGS"
    CXXFLAGS="-Wl,-dynamic-linker,$HOST_ATA_TREE/$1/usr/lib/$libc $CXXFLAGS"
}

setup_toolchain () {
    [ -e "$ATA_SRC_REPO/$1/toolchain" ] || err "package specified with toolchain: missing 'toolchain' file"
    read -r toolchain < "$ATA_SRC_REPO/$1/toolchain"
    CC="$toolchain-cc"
    CXX="$toolchain-c++"
}

parse_needs () {
    mkdir -p "$HOST_ATA_TREE/$pkg/$ver/lib"
    while read -r dep; do
        case $dep in
            libc:*) 
                [ "$libc" ] && err "$pkg/$ver/needs: libc set twice"
                libc=${dep#libc:}
                dep=$libc
            ;;
            toolchain:*)
                [ "$toolchain" ] && err "$pkg/$ver/needs: toolchain set twice"
                toolchain=${dep#toolchain:}
                dep=$toolchain
            ;;
            *:*)
                log "$pkg/$ver/needs: directive ${dep%:*} unrecognised. ignoring"
            ;;
        esac
        [ -e "$HOST_ATA_TREE/$dep" ] || err "dependency $dep not found"
        [ "$odep" = "$dep" ] && continue
        odep=$dep
        CFLAGS="$CFLAGS -I$HOST_ATA_TREE/$dep/usr/include"
        CXXFLAGS="$CXXFLAGS -I$HOST_ATA_TREE/$dep/usr/include"
        CPPFLAGS="$CPPFLAGS -I$HOST_ATA_TREE/$dep/usr/include"
        MPATH="$HOST_ATA_TREE/$dep/usr/bin:$MPATH"
        C_INCLUDE_PATH="$HOST_ATA_TREE/$dep/usr/include:$C_INCLUDE_PATH"
        PKG_CONFIG_PATH="$HOST_ATA_TREE/$dep/usr/lib/pkgconfig:$PKG_CONFIG_PATH"        
        # This code exists to enable building to another host to work.
        # Linking will fail without it. 
        # Builds will eventually be switched over to an isolated environment,
        # which will eliminate the HOST_ATA_TREE and ATA_TREE distinction.
        for f in "$HOST_ATA_TREE/$dep"/usr/lib/*; do
            [ -e "$f" ] || continue
            ln -sf "$f" "$HOST_ATA_TREE/$pkg/$ver/lib"
        done
    done < "$pkg_dir/needs"
    [ -z "$libc" ] || setup_libc "$libc"
    [ -z "$toolchain" ] || setup_toolchain "$toolchain"
}

setup_build_dir () {
    build_dir=/tmp/ata-build-$$
    mkdir -p "$build_dir"
    destdir=/tmp/ata-dest-$$
    mkdir -p "$destdir"
    log "setting up build in $build_dir"
    cd "$build_dir"

    while read -r url dir; do
        extract_to=$build_dir
        f=$(download_file "$url" "$pkg-$ver")
        [ -z "$dir" ] || extract_to="$build_dir/$dir"
        mkdir -p "$extract_to"
        copy_to "$f" "$extract_to"
    done < "$ATA_SRC_REPO/$pkg/$ver/sources"

}

create_binary () {
    : "${XDG_CACHE_HOME:=$HOME/.local/cache}"
    
    dir="$XDG_CACHE_HOME/ata/$pkg-$ver/built"
    mkdir -p "$dir"
    cd "$destdir/$ATA_TREE/$pkg/$ver"
    tar czf "$dir/ata-built-$pkg-$ver.tar.gz" .
}

main () {
    case $1 in
    usage)
        usage
    ;;
    build)
        shift 1
        find_pkg "$@"
        validate_package
        construct_compiler_flags
        setup_build_dir

        time1=$(date +%s)
        log "starting build in $build_dir"
        env -i \
            CC="$CC" \
            CXX="$CXX" \
            CFLAGS="$CFLAGS" \
            CXXFLAGS="$CXXFLAGS" \
            LDFLAGS="$LDFLAGS" \
            PATH="$MPATH" \
            ATA_TREE="$ATA_TREE" \
            MAKEFLAGS="${MAKEFLAGS:--j10}" \
            LD_LIBRARY_PATH="$LD_LIBRARY_PATH" \
            C_INCLUDE_PATH="${C_INCLUDE_PATH%:}"  \
            PKG_CONFIG_PATH="${PKG_CONFIG_PATH%:}" \
            __BASE="$ATA_TREE/$pkg/$ver/usr" \
            "$pkg_dir/build" "$destdir" "$pkg" "$ver"
            
        mkdir -p "$destdir/$ATA_TREE/$pkg/$ver/ata"
        cp -r "$pkg_dir"/* "$destdir/$ATA_TREE/$pkg/$ver/ata"
        
        time2=$(date +%s)
        s=$((time2 - time1))
        log "build completed in ${s}s"
        create_binary 
    ;;
    checksums)
        shift 1
        find_pkg "$@"
        
        [ -e "$pkg_dir"/sources ] || err "sources file required to generate checksums"   
        [ -e "$pkg_dir"/checksums ] && log "checksums file exists, re-generating"
        generate_checksums "$pkg_dir" | sort > "$pkg_dir"/checksums
    ;;
    install)
        shift 1
        find_pkg "$@"
        
        : "${XDG_CACHE_HOME:=$HOME/.local/cache}"
    
        pkgf="$XDG_CACHE_HOME/ata/$pkg-$ver/built/ata-built-$pkg-$ver.tar.gz"
        
        if ! [ -e "$pkgf" ] || [ "$ATA_SKIP_REBUILD" != 1 ]; then
            log "archive $pkgf not found, building"
            main build "$pkg" "$ver"
        fi
        [ -e "$pkgf" ] || err "archive $pkgf not created"
        log "found archive for $pkg/$ver: $pkgf"
        mkdir -p "$DESTDIR/$ATA_TREE/$pkg/$ver"
        log "installing to $DESTDIR$ATA_TREE/$pkg/$ver"
        tar xzf "$pkgf" -C "$DESTDIR/$ATA_TREE/$pkg/$ver"
        create_rpath_dir
        log "installed $pkg/$ver"
        
    ;;
    files)
        shift 1
        case $1 in
        /*) # illegal package name
            files_dir=$1
            shift 1
            ;;
        esac
        find_pkg "$@"
        (cd "$HOST_ATA_TREE/$pkg/$ver/usr"; find ".$files_dir") # everything from the package itself goes into /usr 
    ;;
    resolve)
        shift 1
        find_pkg "$@"
        p "$ATA_TREE/$pkg/$ver"
    ;;
    world)
        shift 1
        # ata worlds are identified by a sha256 of their sorted worldfile, for now
        # ata worlds are a /usr created from symlinking the contents several packages together
        # this may, in future, be implemented via FUSE.
        # worlds can be found in $ATA_WORLDS
        # no dependency resolution is needed
        case $1 in
            build)
                shift 1
                [ -z "$1" ] && err "missing worldfile argument"
                id=$(sort -u "$1" | sha256sum)
                id=${id%% *}
                if [ ! -d "$DESTDIR/$ATA_WORLDS/$id" ]; then
                    log "building world $id"
                    base="$ATA_WORLDS/$id"
                    mkdir -p "$DESTDIR/$base"
                    log "merging into $DESTDIR$base"
                    while read -r pkg; do
                        #[ -d "$DESTDIR/$ATA_TREE/$pkg" ] || err "$pkg not found"
                        log "merging $pkg from $1"
                        recursive_file_merge "$ATA_TREE/$pkg/usr" "$base" "$DESTDIR"
                        
                    done < "$1"
                    log "world $id created"
                else
                    log "world $id exists, skipping"
                fi
            ;;
            env)
                shift 1
                [ -z "$1" ] && err "missing worldfile argument"
                cmd=$2
                : "${cmd:=sh}"
                main world build "$1"
                # shell doesn't scope variables
                env -i PATH="$ATA_WORLDS/$id/bin" "$ATA_WORLDS/$id/bin/$cmd"
            ;;
        esac
    ;;
    *)
        usage
        err "command $1 not implemented"
    ;;
    esac
}
main "$@"
